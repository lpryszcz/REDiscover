#!/usr/bin/env python
desc="""Identify RNA editing sites from RNAseq and DNAseq alignements (.bam).

-s / --stranded optimised for Illumina type stranded protocols

TBD:
- report editing for heterozygous sites
- use stranded info to distinguish between real editing and SNPs
"""
epilog="""Author:
l.p.pryszcz@gmail.com

Warsaw/Bratislava/Fribourg, 21/07/2015
"""

import os, sys, pysam, resource
from datetime import datetime
from multiprocessing import Pool
import numpy as np

alphabet = "ACGT"
base2index = {b: i for i, b in enumerate(alphabet)}
for i, b in enumerate(alphabet.lower()):
    base2index[b] = i

def get_major_alleles(bases, freqs, maxfrac=0.33):
    """Return major alleles, this is alleles with freq
    at least minfrac of max frac for given locus"""
    if len(bases)>1:
        minfreq = maxfrac * max(freqs)
        for i, f in enumerate(freqs):
            if f < minfreq:
                bases.pop(i)
                freqs.pop(i)
    return bases, freqs
                    
def get_allele_freqs(counts, minFreq=0.03, minCount=3):
    """Return major alleles that passed filtering and their frequencies."""
    bases, freqs = [], []
    for c, b in zip(counts, alphabet):
        # skip if alt base calling if less than 3 reads
        if c < minCount:
            continue
        freq = 1.*c/sum(counts)
        #check freq
        if freq < minFreq:
            continue
        bases.append(b)
        freqs.append(freq)
    return bases, freqs

def is_qcfail(a, mapq=15):
    """Return True if alignment record fails quality checks"""
    # a.is_duplicate or a.is_secondary or a.is_qcfail or a.is_supplementary:
    if a.mapq<mapq or a.flag&3840: 
        return True
        
def _match(refi, readi, bases): return refi+bases, readi+bases, True
def _insertion(refi, readi, bases): return refi, readi+bases, []
def _deletion(refi, readi, bases): return refi+bases, readi, []
code2function = {0: _match, 7: _match, 8: _match, 1: _insertion, 6: _insertion,
                 2: _deletion, 3: _deletion, 4: _insertion, 5: _insertion}

def get_blocks(a, start, end, baseq, i, basesize):
    """Return tuple of aligned position of query and reference"""
    readi, refi = 0, a.pos
    for code, bases in a.cigar:
        prefi, preadi = refi, readi
        refi, readi, data = code2function[code](refi, readi, bases)
        if not data or refi<start-1:
            continue
        if prefi<start:
            #print start, end, prefi, bases, preadi
            bases -= start-prefi
            preadi += start-prefi
            prefi = start
            #print start, end, prefi, bases, preadi    
        if refi>end:
            bases -= refi-end
        if bases<1:
            break
        block = [0]*basesize*bases 
        for ii, (b, q) in enumerate(zip(a.seq[preadi:preadi+bases], a.query_qualities[preadi:preadi+bases])):
            if q<baseq or b not in base2index:
                continue
            block[ii*basesize+base2index[b]+i] += 1
        yield prefi, block
                
def bam2calls(bam, ref, start, end, mapq=15, baseq=20, offset=33):
    """Return 2D array of basecalls from BAM file, as follows
    - 1D positions from start to end
    - 2D base counts for ACGT from sense and antisense strand at given position
    """
    sam = pysam.AlignmentFile(bam)
    # ACGT x2 for each strand
    basesize = 2*len(alphabet)
    n =  basesize * (end-start+1)
    calls = np.zeros(n, dtype="int64") #dtype="uint16")
    # stop if ref not in sam file
    if ref not in sam.references:
        return calls
    for a in sam.fetch(ref, start, end):
        if is_qcfail(a, mapq): continue
        # get transcript strand
        i = 0 # for +/for i == 0; for -/rev i==len(alphabet)+1
        if a.is_read1 and a.is_reverse or a.is_read2 and not a.is_reverse:
            i = len(alphabet)
        for refi, block in get_blocks(a, start, end, baseq, i, basesize):
            s, e = basesize*(refi-start), basesize*(refi-start)+len(block)
            calls[s:e] += block
    return calls.reshape((end-start+1, basesize))

def get_combined_calls(bams, ref, start, end, mapq, baseq, stranded=0):
    """Combine basecalls from several files"""
    parsers = (bam2calls(bam, ref, start, end, mapq, baseq) for bam in bams)
    for call in np.sum(parsers, axis=0): 
        if stranded:
            yield (call[:len(alphabet)], call[len(alphabet):])
        else:
            yield (call[:len(alphabet)] + call[len(alphabet):])
        
def fasta2calls(fastafn, ref, start, end, cov=100):
    """Return list of basecalls from FastA file."""
    fasta = pysam.FastaFile(fastafn)
    if ref not in fasta.references:
        raise StopIteration
    for b in fasta.fetch(ref, start, end):
        call = [0]*len(alphabet)
        if b in base2index:
            call[base2index[b]] += cov
        yield call

def get_calls(dna, rna, fasta, stranded, ref, start, end, mapq, baseq, minDepth):
    """Return basecalls from multiple BAM (& FastA) file(s)"""
    # define strands
    strands = "."
    if stranded:
        strands = ("-", "+") # this is true for illumina
    # get parsers    
    rnaparser = get_combined_calls(rna, ref, start, end, mapq, baseq, stranded)
    if dna:
        dnaparser = get_combined_calls(dna, ref, start, end, mapq, baseq, stranded=0)
    else:
        dnaparser = fasta2calls(fasta, ref, start, end)
    # process
    for pos, (dnacall, rnacalls) in enumerate(zip(dnaparser, rnaparser), start+1):
        if sum(dnacall)<minDepth:
            continue
        for strand, rnacall in zip(strands, rnacalls):
            if sum(rnacall)<minDepth:
                continue
            yield ref, pos, strand, dnacall, rnacall

def region2editing(dna, rna, fasta, stranded, minDepth, minDNAfreq, minRNAfreq,
                   mapq, baseq, verbose=0, ref="", start="", end=""):
    """Return RNA editing positions"""
    parser = get_calls(dna, rna, fasta, stranded, ref, start, end, mapq, baseq, minDepth)
    for contig, pos, strand, refbases, sbases in parser:
        # check for SNP
        baseRef, refFreq = get_allele_freqs(refbases, minDNAfreq)
        bases, freqs = get_allele_freqs(sbases, minRNAfreq)
        if not baseRef or not bases or bases==baseRef:
            continue

        # keep only major allele(s)
        baseRef, refFreq = get_major_alleles(baseRef, refFreq)
            
        # remove ref base from alternative bases
        refBase = baseRef[0]
        if refBase in bases:
            idx = bases.index(refBase)
            bases.pop(idx)
            freqs.pop(idx)

        # keep only major allele(s) from sample, but after removing ref allele
        bases, freqs = get_major_alleles(bases, freqs)
        #print contig, pos, strand, refbases, refquals, sbases, squals
        # skip if more alternative alleles
        if len(refBase) > 1 or len(bases) > 1:
            #print contig, pos, strand, refbases, sbases, baseRef, refFreq, bases, freqs
            info = "[WARNING] Wrong number of bases: %s:%s %s %s\n"
            sys.stderr.write(info%(contig, pos, ",".join(baseRef), ",".join(bases)))
            continue

        yield (contig, pos, strand, refBase, bases[0], sum(refbases), refFreq[0], sum(sbases), freqs[0])

def init_args(*args):
    global dna, rna, fasta, stranded, minDepth, minDNAfreq, minRNAfreq, mapq, bcq, verbose
    dna, rna, fasta, stranded, minDepth, minDNAfreq, minRNAfreq, mapq, bcq, verbose = args
    
def worker(args):
    """Count overlapping intervals with given read alignment.
    The algorithm support spliced alignments. """
    global dna, rna, fasta, stranded, minDepth, minDNAfreq, minRNAfreq, mapq, bcq, verbose
    ref, start, end = args
    totdata = []
    for data in region2editing(dna, rna, fasta, stranded, minDepth, minDNAfreq, minRNAfreq,
                               mapq, bcq, verbose, ref, start, end):
        totdata.append(data)
    return totdata

def get_consecutive(data, stepsize=1):
    """Return consecutive windows allowing given max. step size"""
    return np.split(data, np.where(np.diff(data) > stepsize)[0]+1)
            
def get_covered_regions(bams, mincov=3, mapq=10, maxdist=16000):
    """Return chromosome regions covered by at least mincov"""
    sam = pysam.Samfile(bams[0])
    references, lengths = sam.references, sam.lengths
    for ref, length in zip(references, lengths):
        if ref!="chr21": continue
        coverage = np.zeros(length, dtype='uint16')
        for bam in bams:
            sam = pysam.Samfile(bam)
            for a in sam.fetch(reference=ref):
                if is_qcfail(a, mapq):
                    continue
                # add alg blocks
                for s, e in a.blocks:
                    coverage[s:e] += 1
        # get regions with coverage
        covered = np.where(coverage>=mincov)[0]
        for positions in get_consecutive(covered, maxdist):
            if len(positions)<1: 
                continue
            s, e = positions[0]+1, positions[-1]+1
            yield ref, s, e 

def logger(info, add_timestamp=1, add_memory=1, out=sys.stderr):
    """Report nicely formatted stream to stderr"""
    memory = timestamp = ""
    if add_timestamp:
        timestamp = "[%s] "%datetime.ctime(datetime.now())
    if add_memory:
        memory = " [memory: %6i Mb]"%(resource.getrusage(resource.RUSAGE_SELF).ru_maxrss / 1024, )
    out.write("%s%s%s\n"%(timestamp, info, memory))

def main():
    import argparse
    usage  = "%(prog)s [options]" 
    parser  = argparse.ArgumentParser(usage=usage, description=desc, epilog=epilog, \
                                      formatter_class=argparse.RawTextHelpFormatter)
    
    parser.add_argument("-v", "--verbose", default=False, action="store_true", help="verbose")    
    parser.add_argument('--version', action='version', version='1.15b')
    parser.add_argument("-o", "--output", required=True,  help="output file")
    parser.add_argument("-r", "--rna", nargs="+", 
                        help="input RNA-Seq BAM file(s)")
    refpar = parser.add_mutually_exclusive_group(required=True)
    refpar.add_argument("-d", "--dna", nargs="*", default = [], 
                        help="input DNA-Seq BAM file(s)")
    refpar.add_argument("-f", "--fasta", default = None, 
                        help="reference FASTA file")
    parser.add_argument("-s", "--stranded", default=False, action="store_true",
                        help="stranded RNAseq libraries")    
    parser.add_argument("--minDepth", default=5,  type=int,
                        help="minimal depth of coverage [%(default)s]")
    parser.add_argument("--minAltReads", default=3,  type=int,
                        help="minimum no. of reads with alternative base to call RNA editing [%(default)s]")
    parser.add_argument("--minRNAfreq",  default=0.01, type=float,
                        help="min frequency for RNA editing base [%(default)s]")
    parser.add_argument("--minDNAfreq",  default=0.99, type=float,
                        help="min frequency for genomic base [%(default)s]")
    parser.add_argument("-m", "--mapq", default=15, type=int, help="mapping quality [%(default)s]")
    parser.add_argument("--bcq", default=20, type=int, help="basecall quality [%(default)s]")
    parser.add_argument("-t", "--threads", default=4, type=int, help="number of cores to use [%(default)s]")
    
    # print help if no parameters
    if len(sys.argv)==1:
        parser.print_help()
        sys.exit(1)
    o = parser.parse_args()
    if o.verbose:
        sys.stderr.write("Options: %s\n"%str(o))
    
    # check if all input files exists
    for fn in o.dna+o.rna:
        if not os.path.isfile(fn):
            sys.stderr.write("No such file: %s\n"%fn)
            sys.exit(1)

    # check if outfile exists and not empty
    if o.output=="-":
        output = sys.stdout
    elif os.path.exists(o.output) and open(o.output).readline():
        sys.stderr.write("The output file %s exists!\n"%o.output)
        sys.exit(1)
    else:
        output = open(o.output, "w")

    runinfo = " ".join(sys.argv)
    header = "## %s\n# chr\tpos\tstrand\tref\talt\tref cov\tref freq\talt cov\talt freq\n"%runinfo
    output.write(header); output.flush()
    info = "%s\t%s\t%s\t%s\t%s\t%s\t%.3f\t%s\t%.3f\n"
    
    logger("Indexing bam file(s)...")
    for fn in o.dna + o.rna:
        if not os.path.isfile(fn+".bai"):
            cmd = "samtools index %s"%fn
            if o.verbose:
                sys.stderr.write(" %s\n"%cmd)
            os.system(cmd)

    logger("Generating regions...")
    regions = get_covered_regions(o.rna, o.minDepth, o.mapq)

    logger("Genotyping...")
    '''
    for (ref, start, end) in regions:
        print ref, start, end
        parser = region2editing(o.dna, o.rna, o.fasta, o.stranded, o.minDepth, o.minDNAfreq, o.minRNAfreq, \
                                o.mapq, o.bcq, o.verbose, ref, start, end)
        for data in parser:
            output.write(info%data)    
    '''
    initargs = (o.dna, o.rna, o.fasta, o.stranded, o.minDepth, o.minDNAfreq, o.minRNAfreq, \
                o.mapq, o.bcq, o.verbose)
    p = Pool(o.threads, initializer=init_args, initargs=initargs)
    parser = p.imap(worker, regions) #, chunksize=10
    for data in parser:
        output.write("".join(info%d for d in data))
    #'''
    output.write("#Finished!\n")
    logger("Done!")
    
if __name__=='__main__': 
    t0 = datetime.now()
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("\nCtrl-C pressed!      \n")
    except IOError as e:
        sys.stderr.write("I/O error({0}): {1}\n".format(e.errno, e.strerror))
    dt = datetime.now()-t0
    sys.stderr.write("#Time elapsed: %s\n" % dt)
